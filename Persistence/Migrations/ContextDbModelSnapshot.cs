// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Data;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ContextDb))]
    partial class ContextDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("Models.Models.Match", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("MatchType")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("match_type");

                    b.Property<long>("NumberOfSeatsTotal")
                        .HasColumnType("INTEGER")
                        .HasColumnName("number_of_seats_total");

                    b.Property<double>("PriceTicket")
                        .HasColumnType("REAL")
                        .HasColumnName("price_ticket");

                    b.Property<string>("TeamA")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("team_a");

                    b.Property<string>("TeamB")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("team_b");

                    b.HasKey("Id");

                    b.ToTable("match", (string)null);
                });

            modelBuilder.Entity("Models.Models.Ticket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("last_name");

                    b.Property<long>("MatchId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("match_id");

                    b.Property<long>("NumberOfSeats")
                        .HasColumnType("INTEGER")
                        .HasColumnName("number_of_seats_ticket");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("ticket", (string)null);
                });

            modelBuilder.Entity("Models.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Models.Models.Ticket", b =>
                {
                    b.HasOne("Models.Models.Match", "Match")
                        .WithMany("Tickets")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("Models.Models.Match", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
